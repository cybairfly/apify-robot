"async ({ input: { debug }, state: { username } } = context) => {\n\tthis.will('start navigation');\n\tawait Promise.all([\n\t\tpage.goto(URLS.login),\n\t\tpage.waitForNavigation(),\n\t]);\n\n\tthis.will('verify session');\n\tawait Promise.race([\n\t\tpage.waitForSelector(SELECTORS.frame.auth),\n\t\tpage.waitForSelector(SELECTORS.anchor.login),\n\t\tpage.waitForSelector(SELECTORS.anchor.logout, { state: 'attached' }),\n\t]);\n\t\n\tthis.will('initiate login');\n\tif (URLS.login.includes('appleid'))\n\t\tawait human.click(SELECTORS.anchor.login);\n\n\tthis.will('intercept frame');\n\tawait page.waitForSelector(`${SELECTORS.frame.auth}, ${SELECTORS.homePage}`);\n\tconst frameElement = await page.$(SELECTORS.frame.auth);\n\tconst originalFrame = frameElement && await frameElement.contentFrame();\n\tconst frame = (originalFrame && integrateInstance({\n\t\tpage,\n\t\tserver,\n\t\tinstance: originalFrame,\n\t})) || page;\n\n\thuman = new Robot.Human(frame, { debug });\n\tawait frame.waitForSelector(SELECTORS.input.username);\n\tconsole.log(human);\n\tconsole.log(page);\n\n\tthis.will('remember user');\n\tconst isUserPersisted = await frame.$eval(SELECTORS.input.remember, node => node.checked = true).catch(error => false);\n\tthis.step.attachOutput(OUTPUTS.userSaved(isUserPersisted));\n\n\tconst existingUsername = await frame.$eval(SELECTORS.input.username, node => node.value);\n\tif (!existingUsername) {\n\t\tthis.will('enter username');\n\t\tif (input.username)\n\t\t\tawait page.type(SELECTORS.input.username, input.username);\n\t\telse {\n\t\t\tconst { usernameAborted } = Object(await enterPromptedUsername(context));\n\t\t\tif (usernameAborted)\n\t\t\t\treturn OUTPUTS.processAborted;\n\t\t}\n\n\t\tthis.will('submit username');\n\t\tconst [usernameResponse] = await Promise.all([\n\t\t\tpage\n\t\t\t\t.waitForResponse(PREDICATES.user)\n\t\t\t\t.catch(handleMissingResponse(page)),\n\t\t\thuman.press('Enter'),\n\t\t]);\n\t}\n\n\ttry {\n\t\tawait frame.waitForSelector(SELECTORS.input.password);\n\t} catch (error) {\n\t\tconst pattern = await iteratePatterns(page, PATTERNS);\n\t\tif (pattern)\n\t\t\treturn OUTPUTS[pattern];\n\n\t\tthrow new Robot.errors.Login({ error });\n\t}\n\n\tthis.state.frame = frame;\n\tthis.state.human = human;\n\n\treturn OUTPUTS.loginReady;\n}"